name: Test, Build and Push Docker Image

on:
  push:
    branches:
      - '**'
    tags:
      - 'release*'
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from package.json
        id: pkg
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            wabit/bin-collection-service:latest
            wabit/bin-collection-service:${{ env.VERSION }}
          platforms: linux/amd64,linux/arm64

  container-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: localtest:pr

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@v0.19.0
        with:
          image-ref: localtest:pr
          format: table
          exit-code: 1
          ignore-unfixed: true

  container-tests:
    runs-on: ubuntu-latest
    needs: container-scan
    if: github.event_name == 'pull_request'
    steps:
      - name: Run container and test endpoint
        run: |
          docker run -d --name testapp -p 3000:3000 localtest:pr
          sleep 10
          curl --fail http://localhost:3000/health || (docker logs testapp && exit 1)
          docker stop testapp